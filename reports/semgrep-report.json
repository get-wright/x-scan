{
  "version": "1.101.0",
  "findings": [
    {
      "category": "semgrep-rules-trail-of-bits.go",
      "rule": {
        "id": "tmp.valid_rules.semgrep-rules-trail-of-bits.go.string-to-int-signedness-cast",
        "name": "string-to-int-signedness-cast"
      },
      "file": {
        "path": "GoKnocker/main.go",
        "location": {
          "start": "170:2",
          "end": "172:3"
        }
      },
      "issue": {
        "severity": "WARNING",
        "message": "Downcasting or changing sign of an integer with `uint16` method",
        "code": "  if start, err := strconv.Atoi(startStr); err == nil && start > 0 && start < 65536 {\n    s.SetStartPort(uint16(start))\n  }",
        "ignored": false
      },
      "metadata": {
        "category": "security",
        "cwe": "CWE-681: Incorrect Conversion between Numeric Types",
        "subcategory": [
          "audit"
        ],
        "confidence": "HIGH",
        "likelihood": "LOW",
        "impact": "MEDIUM",
        "technology": [
          "--no-technology--"
        ],
        "description": "Integer underflows",
        "references": [
          "https://github.com/golang/go/issues/30209"
        ]
      }
    },
    {
      "category": "semgrep-rules-trail-of-bits.go",
      "rule": {
        "id": "tmp.valid_rules.semgrep-rules-trail-of-bits.go.string-to-int-signedness-cast",
        "name": "string-to-int-signedness-cast"
      },
      "file": {
        "path": "GoKnocker/main.go",
        "location": {
          "start": "178:2",
          "end": "180:3"
        }
      },
      "issue": {
        "severity": "WARNING",
        "message": "Downcasting or changing sign of an integer with `uint16` method",
        "code": "  if end, err := strconv.Atoi(endStr); err == nil && end > 0 && end < 65536 {\n    s.SetEndPort(uint16(end))\n  }",
        "ignored": false
      },
      "metadata": {
        "category": "security",
        "cwe": "CWE-681: Incorrect Conversion between Numeric Types",
        "subcategory": [
          "audit"
        ],
        "confidence": "HIGH",
        "likelihood": "LOW",
        "impact": "MEDIUM",
        "technology": [
          "--no-technology--"
        ],
        "description": "Integer underflows",
        "references": [
          "https://github.com/golang/go/issues/30209"
        ]
      }
    },
    {
      "category": "semgrep-rules-modified.problem-based-packs.insecure-transport.go-stdlib",
      "rule": {
        "id": "tmp.valid_rules.semgrep-rules-modified.problem-based-packs.insecure-transport.go-stdlib.bypass-tls-verification",
        "name": "bypass-tls-verification"
      },
      "file": {
        "path": "GoKnocker/services/fingerprint/fingerprint.go",
        "location": {
          "start": "62:17",
          "end": "65:4"
        }
      },
      "issue": {
        "severity": "WARNING",
        "message": "Checks for disabling of TLS/SSL certificate verification. This should only be used for debugging purposes because it leads to vulnerability to MTM attacks.",
        "code": "    tlsConfig := &tls.Config{\n      InsecureSkipVerify: true,\n      MinVersion:         tls.VersionTLS10,\n    }",
        "ignored": false
      },
      "metadata": {
        "likelihood": "HIGH",
        "impact": "MEDIUM",
        "confidence": "MEDIUM",
        "category": "security",
        "cwe": "CWE-319: Cleartext Transmission of Sensitive Information",
        "owasp": "A03:2017 - Sensitive Data Exposure",
        "references": [
          "https://stackoverflow.com/questions/12122159/how-to-do-a-https-request-with-bad-certificate"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "go"
        ],
        "vulnerability": "Insecure Transport"
      }
    },
    {
      "category": "semgrep-rules-modified.problem-based-packs.insecure-transport.go-stdlib",
      "rule": {
        "id": "tmp.valid_rules.semgrep-rules-modified.problem-based-packs.insecure-transport.go-stdlib.disallow-old-tls-versions",
        "name": "disallow-old-tls-versions"
      },
      "file": {
        "path": "GoKnocker/services/fingerprint/fingerprint.go",
        "location": {
          "start": "62:17",
          "end": "65:4"
        }
      },
      "issue": {
        "severity": "WARNING",
        "message": "Detects creations of tls configuration objects with an insecure MinVersion of TLS. These protocols are deprecated due to POODLE, man in the middle attacks, and other vulnerabilities.",
        "code": "    tlsConfig := &tls.Config{\n      InsecureSkipVerify: true,\n      MinVersion:         tls.VersionTLS10,\n    }",
        "ignored": false
      },
      "metadata": {
        "likelihood": "HIGH",
        "impact": "MEDIUM",
        "confidence": "HIGH",
        "category": "security",
        "cwe": "CWE-319: Cleartext Transmission of Sensitive Information",
        "owasp": "A03:2017 - Sensitive Data Exposure",
        "references": [
          "https://stackoverflow.com/questions/26429751/java-http-clients-and-poodle"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "go"
        ],
        "vulnerability": "Insecure Transport"
      }
    },
    {
      "category": "semgrep-rules-modified.go.lang.security.audit.crypto",
      "rule": {
        "id": "tmp.valid_rules.semgrep-rules-modified.go.lang.security.audit.crypto.missing-ssl-minversion",
        "name": "missing-ssl-minversion"
      },
      "file": {
        "path": "GoKnocker/services/http.go",
        "location": {
          "start": "25:21",
          "end": "27:4"
        }
      },
      "issue": {
        "severity": "WARNING",
        "message": "`MinVersion` is missing from this TLS configuration.  By default, TLS 1.2 is currently used as the minimum when acting as a client, and TLS 1.0 when acting as a server. General purpose web applications should default to TLS 1.3 with all other protocols disabled.  Only where it is known that a web server must support legacy clients with unsupported an insecure browsers (such as Internet Explorer 10), it may be necessary to enable TLS 1.0 to provide support. Add `MinVersion: tls.VersionTLS13' to the TLS configuration to bump the minimum version to TLS 1.3.",
        "code": "    TLSClientConfig: &tls.Config{\n      InsecureSkipVerify: true,\n    },",
        "ignored": false
      },
      "metadata": {
        "cwe": [
          "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        ],
        "owasp": [
          "A03:2017 - Sensitive Data Exposure",
          "A02:2021 - Cryptographic Failures"
        ],
        "source-rule-url": "https://github.com/securego/gosec/blob/master/rules/tls_config.go",
        "references": [
          "https://golang.org/doc/go1.14#crypto/tls",
          "https://golang.org/pkg/crypto/tls/#:~:text=MinVersion",
          "https://www.us-cert.gov/ncas/alerts/TA14-290A"
        ],
        "category": "security",
        "technology": [
          "go"
        ],
        "confidence": "HIGH",
        "subcategory": [
          "audit"
        ],
        "likelihood": "MEDIUM",
        "impact": "LOW"
      }
    },
    {
      "category": "semgrep-rules-modified.problem-based-packs.insecure-transport.go-stdlib",
      "rule": {
        "id": "tmp.valid_rules.semgrep-rules-modified.problem-based-packs.insecure-transport.go-stdlib.bypass-tls-verification",
        "name": "bypass-tls-verification"
      },
      "file": {
        "path": "GoKnocker/services/http.go",
        "location": {
          "start": "25:21",
          "end": "27:4"
        }
      },
      "issue": {
        "severity": "WARNING",
        "message": "Checks for disabling of TLS/SSL certificate verification. This should only be used for debugging purposes because it leads to vulnerability to MTM attacks.",
        "code": "    TLSClientConfig: &tls.Config{\n      InsecureSkipVerify: true,\n    },",
        "ignored": false
      },
      "metadata": {
        "likelihood": "HIGH",
        "impact": "MEDIUM",
        "confidence": "MEDIUM",
        "category": "security",
        "cwe": "CWE-319: Cleartext Transmission of Sensitive Information",
        "owasp": "A03:2017 - Sensitive Data Exposure",
        "references": [
          "https://stackoverflow.com/questions/12122159/how-to-do-a-https-request-with-bad-certificate"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "go"
        ],
        "vulnerability": "Insecure Transport"
      }
    },
    {
      "category": "semgrep-rules-modified.problem-based-packs.insecure-transport.go-stdlib",
      "rule": {
        "id": "tmp.valid_rules.semgrep-rules-modified.problem-based-packs.insecure-transport.go-stdlib.bypass-tls-verification",
        "name": "bypass-tls-verification"
      },
      "file": {
        "path": "GoKnocker/services/https.go",
        "location": {
          "start": "75:16",
          "end": "80:3"
        }
      },
      "issue": {
        "severity": "WARNING",
        "message": "Checks for disabling of TLS/SSL certificate verification. This should only be used for debugging purposes because it leads to vulnerability to MTM attacks.",
        "code": "  tlsConfig := &tls.Config{\n    InsecureSkipVerify: true,\n    MinVersion:         tls.VersionTLS10,\n    MaxVersion:         tls.VersionTLS13,\n    CipherSuites:       defaultCipherSuites,\n  }",
        "ignored": false
      },
      "metadata": {
        "likelihood": "HIGH",
        "impact": "MEDIUM",
        "confidence": "MEDIUM",
        "category": "security",
        "cwe": "CWE-319: Cleartext Transmission of Sensitive Information",
        "owasp": "A03:2017 - Sensitive Data Exposure",
        "references": [
          "https://stackoverflow.com/questions/12122159/how-to-do-a-https-request-with-bad-certificate"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "go"
        ],
        "vulnerability": "Insecure Transport"
      }
    },
    {
      "category": "semgrep-rules-modified.problem-based-packs.insecure-transport.go-stdlib",
      "rule": {
        "id": "tmp.valid_rules.semgrep-rules-modified.problem-based-packs.insecure-transport.go-stdlib.disallow-old-tls-versions",
        "name": "disallow-old-tls-versions"
      },
      "file": {
        "path": "GoKnocker/services/https.go",
        "location": {
          "start": "75:16",
          "end": "80:3"
        }
      },
      "issue": {
        "severity": "WARNING",
        "message": "Detects creations of tls configuration objects with an insecure MinVersion of TLS. These protocols are deprecated due to POODLE, man in the middle attacks, and other vulnerabilities.",
        "code": "  tlsConfig := &tls.Config{\n    InsecureSkipVerify: true,\n    MinVersion:         tls.VersionTLS10,\n    MaxVersion:         tls.VersionTLS13,\n    CipherSuites:       defaultCipherSuites,\n  }",
        "ignored": false
      },
      "metadata": {
        "likelihood": "HIGH",
        "impact": "MEDIUM",
        "confidence": "HIGH",
        "category": "security",
        "cwe": "CWE-319: Cleartext Transmission of Sensitive Information",
        "owasp": "A03:2017 - Sensitive Data Exposure",
        "references": [
          "https://stackoverflow.com/questions/26429751/java-http-clients-and-poodle"
        ],
        "subcategory": [
          "vuln"
        ],
        "technology": [
          "go"
        ],
        "vulnerability": "Insecure Transport"
      }
    }
  ],
  "errors": [],
  "stats": {
    "findings": {
      "total": 8,
      "byCategory": {
        "semgrep-rules-modified.go.lang.security.audit.crypto": 1,
        "semgrep-rules-modified.problem-based-packs.insecure-transport.go-stdlib": 5,
        "semgrep-rules-trail-of-bits.go": 2
      },
      "bySeverity": {
        "WARNING": 8
      }
    },
    "errors": {
      "total": 0,
      "byType": {}
    },
    "scannedFiles": 18
  }
}
